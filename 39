#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <math.h>

#define MAX_LENGTH 1000
#define ALPHABET_SIZE 26
#define TOP_RESULTS 10

// English letter frequencies (from most to least common)
const float english_freq[ALPHABET_SIZE] = {
    0.08167, 0.01492, 0.02782, 0.04253, 0.12702, 0.02228, 0.02015, // A-G
    0.06094, 0.06966, 0.00153, 0.00772, 0.04025, 0.02406, 0.06749,  // H-N
    0.07507, 0.01929, 0.00095, 0.05987, 0.06327, 0.09056,           // O-T
    0.02758, 0.00978, 0.02360, 0.00150, 0.01974, 0.00074             // U-Z
};

// Structure to hold decryption attempts
typedef struct {
    int shift;
    char plaintext[MAX_LENGTH];
    double score;
} DecryptionAttempt;

// Function prototypes
void count_letters(const char *ciphertext, int counts[]);
void decrypt_with_shift(const char *ciphertext, int shift, char *plaintext);
double score_plaintext(const char *plaintext, const int cipher_counts[]);
int compare_attempts(const void *a, const void *b);

int main() {
    char ciphertext[MAX_LENGTH];
    DecryptionAttempt attempts[ALPHABET_SIZE];
    int top_n;

    printf("Additive Cipher Frequency Attack\n");
    printf("Enter ciphertext (letters only, case insensitive): ");
    fgets(ciphertext, MAX_LENGTH, stdin);
    ciphertext[strcspn(ciphertext, "\n")] = '\0';  // Remove newline

    // Convert ciphertext to uppercase
    for (int i = 0; ciphertext[i]; i++) {
        ciphertext[i] = toupper(ciphertext[i]);
    }

    printf("How many top results do you want? (1-%d): ", TOP_RESULTS);
    scanf("%d", &top_n);
    if (top_n < 1 || top_n > TOP_RESULTS) {
        printf("Invalid number. Using default of %d.\n", TOP_RESULTS);
        top_n = TOP_RESULTS;
    }

    // Count letter frequencies in ciphertext
    int cipher_counts[ALPHABET_SIZE] = {0};
    count_letters(ciphertext, cipher_counts);

    // Try all possible shifts (0-25)
    for (int shift = 0; shift < ALPHABET_SIZE; shift++) {
        attempts[shift].shift = shift;
        decrypt_with_shift(ciphertext, shift, attempts[shift].plaintext);
        attempts[shift].score = score_plaintext(attempts[shift].plaintext, cipher_counts);
    }

    // Sort attempts by score (best first)
    qsort(attempts, ALPHABET_SIZE, sizeof(DecryptionAttempt), compare_attempts);

    // Display top results
    printf("\nTop %d possible plaintexts:\n", top_n);
    for (int i = 0; i < top_n; i++) {
        printf("\n#%d (Shift: %d, Score: %.2f)\n%s\n", 
               i+1, attempts[i].shift, attempts[i].score, attempts[i].plaintext);
    }

    return 0;
}

// Count letter frequencies in ciphertext
void count_letters(const char *ciphertext, int counts[]) {
    for (int i = 0; ciphertext[i]; i++) {
        if (isalpha(ciphertext[i])) {
            counts[ciphertext[i] - 'A']++;
        }
    }
}

// Decrypt ciphertext with a given shift
void decrypt_with_shift(const char *ciphertext, int shift, char *plaintext) {
    for (int i = 0; ciphertext[i]; i++) {
        if (isalpha(ciphertext[i])) {
            // Reverse the shift (adding 26 to ensure positive modulo)
            plaintext[i] = 'A' + (ciphertext[i] - 'A' - shift + 26) % 26;
        } else {
            plaintext[i] = ciphertext[i];
        }
    }
    plaintext[strlen(ciphertext)] = '\0';
}

// Score plaintext based on letter frequencies (higher is better)
double score_plaintext(const char *plaintext, const int cipher_counts[]) {
    int counts[ALPHABET_SIZE] = {0};
    int total = 0;
    double score = 0.0;

    // Count letters in plaintext
    for (int i = 0; plaintext[i]; i++) {
        if (isalpha(plaintext[i])) {
            counts[tolower(plaintext[i]) - 'a']++;
            total++;
        }
    }

    // Calculate chi-squared statistic
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        double expected = english_freq[i] * total;
        if (expected > 0) {
            double diff = counts[i] - expected;
            score += (diff * diff) / expected;
        }
    }

    // Lower chi-squared is better (closer to expected frequencies)
    return -score; // Return negative so higher is better
}

// Compare function for sorting decryption attempts
int compare_attempts(const void *a, const void *b) {
    const DecryptionAttempt *da = (const DecryptionAttempt *)a;
    const DecryptionAttempt *db = (const DecryptionAttempt *)b;
    if (da->score > db->score) return -1;
    if (da->score < db->score) return 1;
    return 0;
}
