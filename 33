#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>

// Initial Permutation Table
const int IP[64] = {
    58, 50, 42, 34, 26, 18, 10, 2,
    60, 52, 44, 36, 28, 20, 12, 4,
    62, 54, 46, 38, 30, 22, 14, 6,
    64, 56, 48, 40, 32, 24, 16, 8,
    57, 49, 41, 33, 25, 17, 9, 1,
    59, 51, 43, 35, 27, 19, 11, 3,
    61, 53, 45, 37, 29, 21, 13, 5,
    63, 55, 47, 39, 31, 23, 15, 7
};

// Final Permutation (Inverse of Initial Permutation)
const int FP[64] = {
    40, 8, 48, 16, 56, 24, 64, 32,
    39, 7, 47, 15, 55, 23, 63, 31,
    38, 6, 46, 14, 54, 22, 62, 30,
    37, 5, 45, 13, 53, 21, 61, 29,
    36, 4, 44, 12, 52, 20, 60, 28,
    35, 3, 43, 11, 51, 19, 59, 27,
    34, 2, 42, 10, 50, 18, 58, 26,
    33, 1, 41, 9, 49, 17, 57, 25
};

// Expansion table (E)
const int E[48] = {
    32, 1, 2, 3, 4, 5, 4, 5,
    6, 7, 8, 9, 8, 9, 10, 11,
    12, 13, 12, 13, 14, 15, 16, 17,
    16, 17, 18, 19, 20, 21, 20, 21,
    22, 23, 24, 25, 24, 25, 26, 27,
    28, 29, 28, 29, 30, 31, 32, 1
};

// S-boxes (Substitution boxes)
const int S[8][4][16] = {
    // S1
    {{14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7},
     {0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8},
     {4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0},
     {15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13}},
    // S2
    {{15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10},
     {3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5},
     {0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15},
     {13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9}},
    // S3
    {{10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8},
     {13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1},
     {13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7},
     {1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12}},
    // S4
    {{7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15},
     {13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9},
     {10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4},
     {3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14}},
    // S5
    {{2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9},
     {14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6},
     {4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14},
     {11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3}},
    // S6
    {{12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11},
     {10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8},
     {9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6},
     {4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13}},
    // S7
    {{4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1},
     {13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6},
     {1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2},
     {6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12}},
    // S8
    {{13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7},
     {1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2},
     {7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8},
     {2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11}}
};

// Permutation Function (P)
const int P[32] = {
    16, 7, 20, 21, 29, 12, 28, 17,
    1, 15, 23, 26, 5, 18, 31, 10,
    2, 8, 24, 14, 32, 27, 3, 9,
    19, 13, 30, 6, 22, 11, 4, 25
};

// Permuted Choice 1 (PC-1)
const int PC1[56] = {
    57, 49, 41, 33, 25, 17, 9,
    1, 58, 50, 42, 34, 26, 18,
    10, 2, 59, 51, 43, 35, 27,
    19, 11, 3, 60, 52, 44, 36,
    63, 55, 47, 39, 31, 23, 15,
    7, 62, 54, 46, 38, 30, 22,
    14, 6, 61, 53, 45, 37, 29,
    21, 13, 5, 28, 20, 12, 4
};

// Permuted Choice 2 (PC-2)
const int PC2[48] = {
    14, 17, 11, 24, 1, 5,
    3, 28, 15, 6, 21, 10,
    23, 19, 12, 4, 26, 8,
    16, 7, 27, 20, 13, 2,
    41, 52, 31, 37, 47, 55,
    30, 40, 51, 45, 33, 48,
    44, 49, 39, 56, 34, 53,
    46, 42, 50, 36, 29, 32
};

// Number of left shifts per round
const int shift_table[16] = {
    1, 1, 2, 2, 2, 2, 2, 2,
    1, 2, 2, 2, 2, 2, 2, 1
};

// Function prototypes
void permute(const int *permutation, const uint8_t *input, uint8_t *output, int size);
void generate_subkeys(const uint8_t *key, uint8_t subkeys[16][6]);
void des_round(uint8_t *left, uint8_t *right, const uint8_t *subkey);
void des_encrypt(const uint8_t *plaintext, const uint8_t subkeys[16][6], uint8_t *ciphertext);
void des_decrypt(const uint8_t *ciphertext, const uint8_t subkeys[16][6], uint8_t *plaintext);

int main() {
    // Example 64-bit plaintext (8 bytes)
    uint8_t plaintext[8] = {0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF};
    
    // Example 56-bit key (7 bytes, ignoring parity bits)
    uint8_t key[8] = {0x13, 0x34, 0x57, 0x79, 0x9B, 0xBC, 0xDF, 0xF1};
    
    uint8_t ciphertext[8];
    uint8_t decrypted[8];
    uint8_t subkeys[16][6]; // 16 subkeys, each 48 bits (6 bytes)
    
    printf("Original plaintext: ");
    for (int i = 0; i < 8; i++) printf("%02X ", plaintext[i]);
    printf("\n");
    
    printf("Key: ");
    for (int i = 0; i < 8; i++) printf("%02X ", key[i]);
    printf("\n");
    
    // Generate subkeys
    generate_subkeys(key, subkeys);
    
    // Encrypt
    des_encrypt(plaintext, subkeys, ciphertext);
    printf("\nEncrypted ciphertext: ");
    for (int i = 0; i < 8; i++) printf("%02X ", ciphertext[i]);
    printf("\n");
    
    // Decrypt
    des_decrypt(ciphertext, subkeys, decrypted);
    printf("\nDecrypted plaintext: ");
    for (int i = 0; i < 8; i++) printf("%02X ", decrypted[i]);
    printf("\n");
    
    return 0;
}

// Apply permutation to input
void permute(const int *permutation, const uint8_t *input, uint8_t *output, int size) {
    for (int i = 0; i < size; i++) {
        int pos = permutation[i] - 1;
        int byte_pos = pos / 8;
        int bit_pos = pos % 8;
        int bit = (input[byte_pos] >> (7 - bit_pos)) & 1;
        output[i / 8] |= (bit << (7 - (i % 8)));
    }
}

// Generate 16 subkeys from the original key
void generate_subkeys(const uint8_t *key, uint8_t subkeys[16][6]) {
    uint8_t permuted_key[7] = {0};
    uint8_t left[4], right[4];
    
    // Apply PC-1 permutation (64 bits -> 56 bits)
    permute(PC1, key, permuted_key, 56);
    
    // Split into left and right halves (28 bits each)
    memcpy(left, permuted_key, 3);
    left[3] = permuted_key[3] & 0xF0;
    memcpy(right, permuted_key + 3, 3);
    right[3] = (permuted_key[3] << 4) | (permuted_key[4] >> 4);
    
    // Generate 16 subkeys
    for (int i = 0; i < 16; i++) {
        // Left circular shift
        int shift = shift_table[i];
        uint8_t left_overflow = (left[0] >> (8 - shift)) & 0x0F;
        uint8_t right_overflow = (right[0] >> (8 - shift)) & 0x0F;
        
        for (int j = 0; j < 3; j++) {
            left[j] = (left[j] << shift) | ((left[j + 1] >> (8 - shift)));
            right[j] = (right[j] << shift) | ((right[j + 1] >> (8 - shift)));
        }
        
        left[3] = (left[3] << shift) | (left_overflow);
        right[3] = (right[3] << shift) | (right_overflow);
        
        // Combine left and right
        uint8_t combined[7];
        memcpy(combined, left, 3);
        combined[3] = (left[3] & 0xF0) | (right[0] >> 4);
        memcpy(combined + 4, right + 1, 2);
        combined[6] = right[3] & 0x0F;
        
        // Apply PC-2 permutation (56 bits -> 48 bits)
        memset(subkeys[i], 0, 6);
        permute(PC2, combined, subkeys[i], 48);
    }
}

// DES round function
void des_round(uint8_t *left, uint8_t *right, const uint8_t *subkey) {
    uint8_t expanded[6];
    uint8_t temp_right[4];
    
    // Save original right half
    memcpy(temp_right, right, 4);
    
    // Expansion (32 bits -> 48 bits)
    memset(expanded, 0, 6);
    permute(E, right, expanded, 48);
    
    // XOR with subkey
    for (int i = 0; i < 6; i++) {
        expanded[i] ^= subkey[i];
    }
    
    // S-box substitution (48 bits -> 32 bits)
    uint8_t substituted[4] = {0};
    for (int i = 0; i < 8; i++) {
        int row = ((expanded[i / 6] >> (7 - (i % 6))) & 1) << 1;
        row |= (expanded[(i / 6) + 1] >> (7 - (i % 6))) & 1;
        
        int col = (expanded[i / 6] << ((i % 6) + 2)) & 0x1E;
        col |= (expanded[(i / 6) + 1] >> (6 - (i % 6))) & 1;
        
        uint8_t val = S[i][row][col];
        substituted[i / 2] |= (i % 2) ? val : (val << 4);
    }
    
    // Permutation (P)
    uint8_t permuted[4] = {0};
    permute(P, substituted, permuted, 32);
    
    // XOR with left half
    for (int i = 0; i < 4; i++) {
        right[i] = left[i] ^ permuted[i];
    }
    
    // Set left to original right
    memcpy(left, temp_right, 4);
}

// DES encryption
void des_encrypt(const uint8_t *plaintext, const uint8_t subkeys[16][6], uint8_t *ciphertext) {
    uint8_t permuted[8] = {0};
    uint8_t left[4], right[4];
    
    // Initial Permutation (IP)
    permute(IP, plaintext, permuted, 64);
    
    // Split into left and right halves (32 bits each)
    memcpy(left, permuted, 4);
    memcpy(right, permuted + 4, 4);
    
    // 16 rounds
    for (int i = 0; i < 16; i++) {
        des_round(left, right, subkeys[i]);
    }
    
    // Combine (right comes before left in final permutation)
    uint8_t combined[8];
    memcpy(combined, right, 4);
    memcpy(combined + 4, left, 4);
    
    // Final Permutation (FP = IP^-1)
    memset(ciphertext, 0, 8);
    permute(FP, combined, ciphertext, 64);
}

// DES decryption (same as encryption but with reversed subkeys)
void des_decrypt(const uint8_t *ciphertext, const uint8_t subkeys[16][6], uint8_t *plaintext) {
    uint8_t permuted[8] = {0};
    uint8_t left[4], right[4];
    
    // Initial Permutation (IP)
    permute(IP, ciphertext, permuted, 64);
    
    // Split into left and right halves (32 bits each)
    memcpy(left, permuted, 4);
    memcpy(right, permuted + 4, 4);
    
    // 16 rounds with subkeys in reverse order
    for (int i = 15; i >= 0; i--) {
        des_round(left, right, subkeys[i]);
    }
    
    // Combine (right comes before left in final permutation)
    uint8_t combined[8];
    memcpy(combined, right, 4);
    memcpy(combined + 4, left, 4);
    
    // Final Permutation (FP = IP^-1)
    memset(plaintext, 0, 8);
    permute(FP, combined, plaintext, 64);
}
