#include <stdio.h>
#include <math.h>

// Function to compute (base^exp) % mod
long long mod_pow(long long base, long long exp, long long mod) {
    long long result = 1;
    base %= mod;
    while (exp > 0) {
        if (exp % 2 == 1)
            result = (result * base) % mod;
        exp /= 2;
        base = (base * base) % mod;
    }
    return result;
}

// Function to compute GCD
long long gcd(long long a, long long b) {
    while (b != 0) {
        long long temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

// Function to compute modular inverse using Extended Euclidean Algorithm
long long mod_inverse(long long e, long long phi) {
    long long t = 0, newt = 1;
    long long r = phi, newr = e;
    while (newr != 0) {
        long long quotient = r / newr;
        long long temp = newt;
        newt = t - quotient * newt;
        t = temp;

        temp = newr;
        newr = r - quotient * newr;
        r = temp;
    }
    if (r > 1) return -1;  // No inverse
    if (t < 0) t += phi;
    return t;
}

int main() {
    // For simplicity, use small primes
    long long p = 61;
    long long q = 53;
    long long n = p * q;
    long long phi = (p - 1) * (q - 1);

    long long e = 17; // Public key
    if (gcd(e, phi) != 1) {
        printf("e and phi(n) are not coprime!\n");
        return 1;
    }

    long long d = mod_inverse(e, phi); // Private key
    if (d == -1) {
        printf("Modular inverse doesn't exist!\n");
        return 1;
    }

    printf("Public Key (e, n): (%lld, %lld)\n", e, n);
    printf("Private Key (d, n): (%lld, %lld)\n", d, n);

    // Example message
    long long message = 65;
    printf("Original Message: %lld\n", message);

    // Encryption
    long long ciphertext = mod_pow(message, e, n);
    printf("Encrypted Message: %lld\n", ciphertext);

    // Decryption
    long long decrypted = mod_pow(ciphertext, d, n);
    printf("Decrypted Message: %lld\n", decrypted);

    return 0;
}
