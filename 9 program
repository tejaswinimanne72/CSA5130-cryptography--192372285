#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define SIZE 5

// Function to generate the Playfair matrix
void generateMatrix(char key[], char matrix[SIZE][SIZE]) {
    int used[26] = {0};
    used['J' - 'A'] = 1; // I and J are treated the same

    int idx = 0;
    char fullKey[26];
    for (int i = 0; key[i]; i++) {
        char ch = toupper(key[i]);
        if (ch == 'J') ch = 'I';
        if (isalpha(ch) && !used[ch - 'A']) {
            fullKey[idx++] = ch;
            used[ch - 'A'] = 1;
        }
    }

    for (char ch = 'A'; ch <= 'Z'; ch++) {
        if (ch == 'J') continue;
        if (!used[ch - 'A']) {
            fullKey[idx++] = ch;
            used[ch - 'A'] = 1;
        }
    }

    int k = 0;
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            matrix[i][j] = fullKey[k++];
        }
    }
}

// Find row and column of a character in the matrix
void findPosition(char matrix[SIZE][SIZE], char ch, int *row, int *col) {
    if (ch == 'J') ch = 'I';
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            if (matrix[i][j] == ch) {
                *row = i;
                *col = j;
                return;
            }
        }
    }
}

// Decrypt the Playfair cipher text
void decryptPlayfair(char ciphertext[], char matrix[SIZE][SIZE], char plaintext[]) {
    int len = strlen(ciphertext);
    for (int i = 0; i < len; i += 2) {
        char a = toupper(ciphertext[i]);
        char b = toupper(ciphertext[i + 1]);
        int r1, c1, r2, c2;

        findPosition(matrix, a, &r1, &c1);
        findPosition(matrix, b, &r2, &c2);

        if (r1 == r2) {
            plaintext[i] = matrix[r1][(c1 + SIZE - 1) % SIZE];
            plaintext[i + 1] = matrix[r2][(c2 + SIZE - 1) % SIZE];
        } else if (c1 == c2) {
            plaintext[i] = matrix[(r1 + SIZE - 1) % SIZE][c1];
            plaintext[i + 1] = matrix[(r2 + SIZE - 1) % SIZE][c2];
        } else {
            plaintext[i] = matrix[r1][c2];
            plaintext[i + 1] = matrix[r2][c1];
        }
    }
    plaintext[len] = '\0';
}

int main() {
    char keyword[] = "MONARCHY";  // Playfair key
    char matrix[SIZE][SIZE];

    // Concatenated and cleaned ciphertext (removes spaces)
    char ciphertext[] =
        "KXJEYUREBEZWEHEWRYTUHEYFS"
        "KREHEGOYFIWTTTUOLKSYCAJPO"
        "BOTEIZONTXBYBNTGONEYCUZWR"
        "GDSONSXBOUYWRHEBAAHYUSEDQ";

    char plaintext[sizeof(ciphertext)];

    // Generate Playfair matrix
    generateMatrix(keyword, matrix);

    // Print Playfair matrix
    printf("Playfair Matrix (from keyword \"%s\"):\n", keyword);
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            printf("%c ", matrix[i][j]);
        }
        printf("\n");
    }

    // Decrypt and print plaintext
    decryptPlayfair(ciphertext, matrix, plaintext);

    printf("\nDecrypted Plaintext:\n");
    for (int i = 0; i < strlen(plaintext); i++) {
        printf("%c", plaintext[i]);
        // Optional: print space every 5 letters
        if ((i + 1) % 5 == 0) printf(" ");
    }
    printf("\n");

    return 0;
}
