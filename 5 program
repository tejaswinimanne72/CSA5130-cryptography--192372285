#include <stdio.h>
#include <ctype.h>
#include <stdbool.h>
#include <string.h>

// Function to calculate GCD using Euclidean algorithm
int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

// Function to check if 'a' is valid (must be coprime with 26)
bool is_valid_a(int a) {
    return gcd(a, 26) == 1;
}

// Function to find modular inverse of a mod 26
int find_inverse(int a) {
    a = a % 26;
    for (int i = 1; i < 26; i++) {
        if ((a * i) % 26 == 1) {
            return i;
        }
    }
    return -1; // No inverse exists
}

// Affine encryption function
char affine_encrypt(int a, int b, char p) {
    if (!isalpha(p)) return p;
    
    char base = islower(p) ? 'a' : 'A';
    int p_val = tolower(p) - 'a';
    int c_val = (a * p_val + b) % 26;
    if (c_val < 0) c_val += 26; // Ensure positive result
    
    return base + c_val;
}

// Affine decryption function
char affine_decrypt(int a, int b, char c) {
    if (!isalpha(c)) return c;
    
    int a_inv = find_inverse(a);
    if (a_inv == -1) return '?'; // Shouldn't happen if a is validated
    
    char base = islower(c) ? 'a' : 'A';
    int c_val = tolower(c) - 'a';
    int p_val = (a_inv * (c_val - b + 26)) % 26; // Added +26 to ensure positive before mod
    if (p_val < 0) p_val += 26; // Additional safety
    
    return base + p_val;
}

int main() {
    int a, b;
    char plaintext[1000];
    char ciphertext[1000];
    char decrypted[1000];
    
    printf("Affine Caesar Cipher Program\n");
    printf("Allowed 'a' values: 1, 3, 5, 7, 9, 11, 15, 17, 19, 21, 23, 25\n");
    
    // Get valid 'a' value
    do {
        printf("Enter value for 'a': ");
        scanf("%d", &a);
        if (!is_valid_a(a)) {
            printf("Invalid 'a'! Must be coprime with 26.\n");
        }
    } while (!is_valid_a(a));
    
    // Get 'b' value
    printf("Enter value for 'b' (any integer): ");
    scanf("%d", &b);
    
    // Clear input buffer
    while (getchar() != '\n');
    
    // Get plaintext
    printf("Enter plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);
    plaintext[strcspn(plaintext, "\n")] = '\0';
    
    // Encrypt
    for (int i = 0; plaintext[i] != '\0'; i++) {
        ciphertext[i] = affine_encrypt(a, b, plaintext[i]);
    }
    ciphertext[strlen(plaintext)] = '\0';
    
    // Decrypt
    for (int i = 0; ciphertext[i] != '\0'; i++) {
        decrypted[i] = affine_decrypt(a, b, ciphertext[i]);
    }
    decrypted[strlen(ciphertext)] = '\0';
    
    // Results
    printf("\nKey parameters: a = %d, b = %d\n", a, b);
    printf("Plaintext:  %s\n", plaintext);
    printf("Encrypted:  %s\n", ciphertext);
    printf("Decrypted:  %s\n", decrypted);
    
    return 0;
}
