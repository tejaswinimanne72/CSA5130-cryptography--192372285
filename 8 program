#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define ALPHABET_LEN 26

void generateCipherAlphabet(const char *keyword, char cipher[ALPHABET_LEN]) {
    int used[26] = {0};
    int index = 0;

    // Step 1: Add unique letters from keyword
    for (int i = 0; keyword[i] != '\0'; i++) {
        char ch = toupper(keyword[i]);
        if (isalpha(ch) && !used[ch - 'A']) {
            cipher[index++] = ch;
            used[ch - 'A'] = 1;
        }
    }

    // Step 2: Add remaining letters from A-Z
    for (char ch = 'A'; ch <= 'Z'; ch++) {
        if (!used[ch - 'A']) {
            cipher[index++] = ch;
        }
    }
}

// Encrypt plaintext using the cipher alphabet
void encrypt(const char *plaintext, const char cipher[ALPHABET_LEN], char *ciphertext) {
    for (int i = 0; plaintext[i] != '\0'; i++) {
        char ch = plaintext[i];

        if (isalpha(ch)) {
            int isLower = islower(ch);
            int pos = toupper(ch) - 'A';
            char enc = cipher[pos];
            ciphertext[i] = isLower ? tolower(enc) : enc;
        } else {
            ciphertext[i] = ch;  // Non-alphabetic characters unchanged
        }
    }
    ciphertext[strlen(plaintext)] = '\0';  // Null-terminate the ciphertext
}

int main() {
    char keyword[100];
    char plaintext[1000];
    char ciphertext[1000];
    char cipher[ALPHABET_LEN];

    printf("Enter the keyword: ");
    scanf("%s", keyword);

    printf("Enter the plaintext: ");
    getchar();  // Consume newline left by scanf
    fgets(plaintext, sizeof(plaintext), stdin);
    plaintext[strcspn(plaintext, "\n")] = '\0';  // Remove trailing newline

    generateCipherAlphabet(keyword, cipher);

    // Display generated cipher alphabet
    printf("\nGenerated Cipher Alphabet:\n");
    printf("Plain : ");
    for (char ch = 'A'; ch <= 'Z'; ch++) printf("%c ", ch);
    printf("\nCipher: ");
    for (int i = 0; i < ALPHABET_LEN; i++) printf("%c ", cipher[i]);
    printf("\n");

    encrypt(plaintext, cipher, ciphertext);

    printf("\nEncrypted Ciphertext: %s\n", ciphertext);

    return 0;
}
