#include <stdio.h>
#include <math.h>

// Function to compute (base^exp) % mod efficiently
long long mod_exp(long long base, long long exp, long long mod) {
    long long result = 1;
    base %= mod;
    while (exp > 0) {
        if (exp % 2)
            result = (result * base) % mod;
        exp /= 2;
        base = (base * base) % mod;
    }
    return result;
}

// Extended Euclidean Algorithm to find modular inverse
long long mod_inverse(long long e, long long phi) {
    long long t = 0, new_t = 1;
    long long r = phi, new_r = e;
    long long quotient, temp;

    while (new_r != 0) {
        quotient = r / new_r;

        temp = new_t;
        new_t = t - quotient * new_t;
        t = temp;

        temp = new_r;
        new_r = r - quotient * new_r;
        r = temp;
    }

    if (r > 1) return -1;  // No inverse exists
    if (t < 0) t += phi;

    return t;
}

int main() {
    long long p = 59, q = 61;
    long long n = p * q;         // n = 3599
    long long phi = (p - 1) * (q - 1);  // phi = 3480
    long long e = 31;
    long long d = mod_inverse(e, phi);

    printf("Public Key (e, n): (%lld, %lld)\n", e, n);
    printf("Private Key (d, n): (%lld, %lld)\n", d, n);

    // Example: Encrypt and decrypt a message
    long long plaintext = 1234;
    long long ciphertext = mod_exp(plaintext, e, n);
    long long decrypted = mod_exp(ciphertext, d, n);

    printf("Plaintext: %lld\n", plaintext);
    printf("Ciphertext: %lld\n", ciphertext);
    printf("Decrypted: %lld\n", decrypted);

    return 0;
}
