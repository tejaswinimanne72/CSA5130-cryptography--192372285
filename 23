#include <stdio.h>
#include <string.h>

#define BLOCK_SIZE 8

// Function prototypes
unsigned char sdes_encrypt(unsigned char plaintext, unsigned short key);
unsigned char xor8(unsigned char a, unsigned char b);
unsigned short permute10(unsigned short key);
unsigned short left_shift5(unsigned short k, int shifts);
unsigned char permute8(unsigned short key, int round);
unsigned char fk(unsigned char data, unsigned short subkey);
unsigned char sbox(unsigned char input, int box);
unsigned char initial_permutation(unsigned char input);
unsigned char inverse_initial_permutation(unsigned char input);

unsigned char sdes_encrypt(unsigned char plaintext, unsigned short key) {
    key &= 0x03FF;
    unsigned short permuted_key = permute10(key);
    unsigned short k1 = permute8(permuted_key, 1);
    unsigned short k2 = permute8(permuted_key, 3);

    unsigned char ip = initial_permutation(plaintext);
    ip = fk(ip, k1);
    ip = (ip << 4) | (ip >> 4);
    ip = fk(ip, k2);
    return inverse_initial_permutation(ip);
}

unsigned char xor8(unsigned char a, unsigned char b) {
    return a ^ b;
}

unsigned short permute10(unsigned short key) {
    unsigned short perm[] = {2, 4, 1, 6, 3, 9, 0, 8, 7, 5};
    unsigned short result = 0;
    for (int i = 0; i < 10; i++)
        result |= ((key >> (9 - perm[i])) & 0x01) << (9 - i);
    return result;
}

unsigned short left_shift5(unsigned short k, int shifts) {
    return ((k << shifts) | (k >> (5 - shifts))) & 0x1F;
}

unsigned char permute8(unsigned short key, int round) {
    unsigned short left = (key >> 5) & 0x1F;
    unsigned short right = key & 0x1F;

    if (round == 1) {
        left = left_shift5(left, 1);
        right = left_shift5(right, 1);
    } else {
        left = left_shift5(left, 3);
        right = left_shift5(right, 3);
    }

    unsigned short combined = (left << 5) | right;
    unsigned short perm[] = {5, 2, 6, 3, 7, 4, 9, 8};
    unsigned char result = 0;

    for (int i = 0; i < 8; i++)
        result |= ((combined >> (9 - perm[i])) & 0x01) << (7 - i);

    return result;
}

unsigned char fk(unsigned char data, unsigned short subkey) {
    unsigned char left = (data >> 4) & 0x0F;
    unsigned char right = data & 0x0F;

    unsigned char expanded = ((right & 0x08) << 1) | ((right & 0x04) << 3) |
                             ((right & 0x02) >> 1) | ((right & 0x01) << 1) |
                             ((right & 0x08) >> 3) | ((right & 0x04) << 1) |
                             ((right & 0x02) << 1) | ((right & 0x01) << 1);

    unsigned char temp = expanded ^ subkey;

    unsigned char left_sbox = sbox((temp >> 4) & 0x0F, 0);
    unsigned char right_sbox = sbox(temp & 0x0F, 1);

    unsigned char f_output = ((left_sbox << 2) | right_sbox) & 0x0F;

    return ((left ^ f_output) << 4) | right;
}

unsigned char sbox(unsigned char input, int box) {
    int row = ((input & 0x08) >> 2) | (input & 0x01);
    int col = (input & 0x06) >> 1;

    unsigned char s0[4][4] = {{1, 0, 3, 2}, {3, 2, 1, 0}, {0, 2, 1, 3}, {3, 1, 3, 2}};
    unsigned char s1[4][4] = {{0, 1, 2, 3}, {2, 0, 1, 3}, {3, 0, 1, 0}, {2, 1, 0, 3}};

    return box == 0 ? s0[row][col] : s1[row][col];
}

unsigned char initial_permutation(unsigned char input) {
    unsigned char perm[] = {1, 5, 2, 0, 3, 7, 4, 6};
    unsigned char result = 0;

    for (int i = 0; i < 8; i++)
        result |= ((input >> (7 - perm[i])) & 0x01) << (7 - i);

    return result;
}

unsigned char inverse_initial_permutation(unsigned char input) {
    unsigned char perm[] = {3, 0, 2, 4, 6, 1, 7, 5};
    unsigned char result = 0;

    for (int i = 0; i < 8; i++)
        result |= ((input >> (7 - perm[i])) & 0x01) << (7 - i);

    return result;
}

void print_binary(const char *label, unsigned char *data, int len) {
    printf("%s: ", label);
    for (int i = 0; i < len; i++)
        for (int b = 7; b >= 0; b--)
            printf("%d", (data[i] >> b) & 1);
    printf("\n");
}

int main() {
    unsigned char plaintext[3] = {0x01, 0x02, 0x04};  // Binary: 00000001 00000010 00000100
    unsigned char ciphertext[3];
    unsigned char decrypted[3];

    unsigned char counter = 0x00;  // Starting counter
    unsigned short key = 0x1FD;    // 0111111101

    printf("=== Encryption (CTR Mode) ===\n");
    for (int i = 0; i < 3; i++) {
        unsigned char keystream = sdes_encrypt(counter, key);
        ciphertext[i] = xor8(plaintext[i], keystream);
        counter++;
    }
    print_binary("Ciphertext", ciphertext, 3);

    printf("\n=== Decryption (CTR Mode) ===\n");
    counter = 0x00;
    for (int i = 0; i < 3; i++) {
        unsigned char keystream = sdes_encrypt(counter, key);
        decrypted[i] = xor8(ciphertext[i], keystream);
        counter++;
    }
    print_binary("Decrypted", decrypted, 3);

    return 0;
}
