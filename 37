#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <math.h>

#define MAX_LENGTH 1000
#define ALPHABET_SIZE 26
#define TOP_RESULTS 10

// English letter frequencies (from most to least common)
const float english_freq[ALPHABET_SIZE] = {
    0.08167, 0.01492, 0.02782, 0.04253, 0.12702, 0.02228, 0.02015, // A-G
    0.06094, 0.06966, 0.00153, 0.00772, 0.04025, 0.02406, 0.06749,  // H-N
    0.07507, 0.01929, 0.00095, 0.05987, 0.06327, 0.09056,           // O-T
    0.02758, 0.00978, 0.02360, 0.00150, 0.01974, 0.00074             // U-Z
};

// Structure to hold letter frequency information
typedef struct {
    char letter;
    int count;
} LetterFrequency;

// Structure to hold decryption attempts
typedef struct {
    char key[ALPHABET_SIZE + 1];  // +1 for null terminator
    char plaintext[MAX_LENGTH];
    double score;
} DecryptionAttempt;

// Function prototypes
void count_letters(const char *ciphertext, LetterFrequency freq[]);
void sort_frequencies(LetterFrequency freq[]);
void generate_decryption_keys(LetterFrequency cipher_freq[], char keys[][ALPHABET_SIZE + 1]);
void decrypt_with_key(const char *ciphertext, const char *key, char *plaintext);
double score_plaintext(const char *plaintext);
int compare_attempts(const void *a, const void *b);

int main() {
    char ciphertext[MAX_LENGTH];
    char top_plaintexts[TOP_RESULTS][MAX_LENGTH];
    char keys[TOP_RESULTS][ALPHABET_SIZE + 1];
    DecryptionAttempt attempts[TOP_RESULTS * 100];  // Store multiple attempts
    int num_attempts = 0;
    int top_n;

    printf("Monoalphabetic Substitution Cipher Frequency Attack\n");
    printf("Enter ciphertext (letters only, case insensitive): ");
    fgets(ciphertext, MAX_LENGTH, stdin);
    ciphertext[strcspn(ciphertext, "\n")] = '\0';  // Remove newline

    // Convert ciphertext to uppercase
    for (int i = 0; ciphertext[i]; i++) {
        ciphertext[i] = toupper(ciphertext[i]);
    }

    printf("How many top results do you want? (1-%d): ", TOP_RESULTS);
    scanf("%d", &top_n);
    if (top_n < 1 || top_n > TOP_RESULTS) {
        printf("Invalid number. Using default of %d.\n", TOP_RESULTS);
        top_n = TOP_RESULTS;
    }

    // Step 1: Count letter frequencies in ciphertext
    LetterFrequency cipher_freq[ALPHABET_SIZE];
    count_letters(ciphertext, cipher_freq);

    // Step 2: Sort ciphertext frequencies (high to low)
    sort_frequencies(cipher_freq);

    // Step 3: Generate possible decryption keys
    char possible_keys[100][ALPHABET_SIZE + 1];  // Store multiple key possibilities
    generate_decryption_keys(cipher_freq, possible_keys);

    // Step 4: Try decrypting with each key and score the results
    for (int i = 0; i < 100 && possible_keys[i][0] != '\0'; i++) {
        decrypt_with_key(ciphertext, possible_keys[i], attempts[num_attempts].plaintext);
        strcpy(attempts[num_attempts].key, possible_keys[i]);
        attempts[num_attempts].score = score_plaintext(attempts[num_attempts].plaintext);
        num_attempts++;
    }

    // Step 5: Sort attempts by score (best first)
    qsort(attempts, num_attempts, sizeof(DecryptionAttempt), compare_attempts);

    // Step 6: Display top results
    printf("\nTop %d possible plaintexts:\n", top_n);
    for (int i = 0; i < top_n && i < num_attempts; i++) {
        printf("\n#%d (Score: %.2f)\nKey: %s\nPlaintext: %s\n", 
               i+1, attempts[i].score, attempts[i].key, attempts[i].plaintext);
    }

    return 0;
}

// Count letter frequencies in ciphertext
void count_letters(const char *ciphertext, LetterFrequency freq[]) {
    // Initialize frequencies
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        freq[i].letter = 'A' + i;
        freq[i].count = 0;
    }

    // Count each letter
    for (int i = 0; ciphertext[i]; i++) {
        if (isalpha(ciphertext[i])) {
            freq[ciphertext[i] - 'A'].count++;
        }
    }
}

// Sort frequencies in descending order
void sort_frequencies(LetterFrequency freq[]) {
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        for (int j = i + 1; j < ALPHABET_SIZE; j++) {
            if (freq[i].count < freq[j].count) {
                LetterFrequency temp = freq[i];
                freq[i] = freq[j];
                freq[j] = temp;
            }
        }
    }
}

// Generate possible decryption keys by matching ciphertext frequencies to English frequencies
void generate_decryption_keys(LetterFrequency cipher_freq[], char keys[][ALPHABET_SIZE + 1]) {
    // Most common English letters in order
    const char common_english[] = "ETAOINSHRDLCUMWFGYPBVKJXQZ";

    // Generate multiple key possibilities by varying the mapping
    for (int variation = 0; variation < 100; variation++) {
        char key[ALPHABET_SIZE + 1] = {0};
        
        // Create a key by mapping ciphertext frequencies to English frequencies
        for (int i = 0; i < ALPHABET_SIZE; i++) {
            int english_index = (i + variation) % ALPHABET_SIZE;
            key[cipher_freq[i].letter - 'A'] = common_english[english_index];
        }
        key[ALPHABET_SIZE] = '\0';
        strcpy(keys[variation], key);
    }
}

// Decrypt ciphertext using a given key
void decrypt_with_key(const char *ciphertext, const char *key, char *plaintext) {
    for (int i = 0; ciphertext[i]; i++) {
        if (isalpha(ciphertext[i])) {
            plaintext[i] = key[ciphertext[i] - 'A'];
        } else {
            plaintext[i] = ciphertext[i];
        }
    }
    plaintext[strlen(ciphertext)] = '\0';
}

// Score plaintext based on letter frequencies (higher is better)
double score_plaintext(const char *plaintext) {
    int counts[ALPHABET_SIZE] = {0};
    int total = 0;
    double score = 0.0;

    // Count letters in plaintext
    for (int i = 0; plaintext[i]; i++) {
        if (isalpha(plaintext[i])) {
            counts[tolower(plaintext[i]) - 'a']++;
            total++;
        }
    }

    // Calculate chi-squared statistic
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        double expected = english_freq[i] * total;
        if (expected > 0) {
            double diff = counts[i] - expected;
            score += (diff * diff) / expected;
        }
    }

    // Lower chi-squared is better (closer to expected frequencies)
    return -score; // Return negative so higher is better
}

// Compare function for sorting decryption attempts
int compare_attempts(const void *a, const void *b) {
    const DecryptionAttempt *da = (const DecryptionAttempt *)a;
    const DecryptionAttempt *db = (const DecryptionAttempt *)b;
    if (da->score > db->score) return -1;
    if (da->score < db->score) return 1;
    return 0;
}
